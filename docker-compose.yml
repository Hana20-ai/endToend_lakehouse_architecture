version: '3'
services:
  myservice:
    build:
      context: .
      dockerfile: Dockerfile
    image: hadoop-spark-delta:latest
    networks:
           - nifi-network
    volumes:
      - spark_jars:/user/spark/share/lib
      - sales_silver:/delta/tables/sales/sales_silver
      - sales_gold:/delta/tables/sales/sales_gold
    

  # configuration manager for NiFi
  # Enabling distributed coordination and communication within our cluster in case we want to scale up and run multiple nodes of NiFi later on

  zookeeper:
        hostname: zookeeper
        container_name: zookeeper
        image: 'bitnami/zookeeper:latest'  
        environment:
            - ALLOW_ANONYMOUS_LOGIN=yes
        networks:
           - nifi-network
        restart: always

    # data extraction, transformation and load service
  nifi:
    image: apache/nifi:latest
    ports:
      - 9999 # Unsecured HTTP Web Port
    environment:
    #Nifi web UI credentials 
      - SINGLE_USER_CREDENTIALS_USERNAME=admin
      - SINGLE_USER_CREDENTIALS_PASSWORD=adminHANAWWWFFF
      - NIFI_WEB_HTTP_PORT=9999
      - NIFI_ZK_CONNECT_STRING=zookeeper:2181
      - NIFI_SENSITIVE_PROPS_KEY=l5bGW7Miy5Vv5sGTr8tXqLyVfpOdTnY0
      - NIFI_ELECTION_MAX_WAIT=1 mins
      - NIFI_CLUSTER_PROTOCOL_HEARTBEAT_INTERVAL=5 sec
      - NIFI_CLUSTER_IS_NODE=true
      - NIFI_CLUSTER_NODE_PROTOCOL_PORT=8082
    networks:
            - nifi-network
            
    volumes:
            - nifi-database_repository:/opt/nifi/nifi-current/database_repository
            - nifi-flowfile_repository:/opt/nifi/nifi-current/flowfile_repository
            - nifi-content_repository:/opt/nifi/nifi-current/content_repository
            - nifi-provenance_repository:/opt/nifi/nifi-current/provenance_repository
            - nifi-state:/opt/nifi/nifi-current/state
            - ./nifi/logs:/opt/nifi/nifi-current/logs
            - ./nifi/jdbc:/opt/nifi/nifi-current/jdbc
            - ./nifi/credentials:/opt/nifi/nifi-current/credentials
            #UNCOMMENT this line after copying the /conf directory from the container to your local directory to persist NiFi flows
            - ./nifi/conf:/opt/nifi/nifi-current/conf
            #ALLOW NIFI TO communicate with postgresql 
            - type : bind
              source: ./config/jars/
              target: /opt/nifi/nifi-current/drive
              #ALLOW NIFI TO WRITE INTO HDFS 
            - type : bind
              source: ./config/core-site.xml
              target: /opt/nifi/nifi-current/lib/core-site.xml
            - type : bind
              source: ./config/hdfs-site.xml
              target: /opt/nifi/nifi-current/lib/hdfs-site.xml
    #command: sh -c "echo '172.30.0.2 hadoop-master' >> /etc/hosts"

            
    #restart: on-failure
      
    # version control for nifi flows
  registry:
        hostname: registry
        container_name: registry
        image: 'apache/nifi-registry:latest'  
        restart: on-failure
        ports:
            - "18080:18080"
        environment:
            - LOG_LEVEL=INFO
            - NIFI_REGISTRY_DB_DIR=/opt/nifi-registry/nifi-registry-current/database
            - NIFI_REGISTRY_FLOW_PROVIDER=file
            - NIFI_REGISTRY_FLOW_STORAGE_DIR=/opt/nifi-registry/nifi-registry-current/flow_storage
        volumes:
        #persisted!
            - ./nifi_registry/database:/opt/nifi-registry/nifi-registry-current/database
            - ./nifi_registry/flow_storage:/opt/nifi-registry/nifi-registry-current/flow_storage
        networks:
            - nifi-network
            
    

    # relational database
  postgres:
        hostname: postgres
        container_name: postgres
        image: 'postgres:latest'  
        environment:
            POSTGRES_USER: 'postgres'
            POSTGRES_PASSWORD: 'postgres'
            PGDATA: /data/postgres
        volumes:
            - postgres_data:/data/postgres
        ports:
            - "5432:5432"
        networks:
            - nifi-network
            
        restart: on-failure
        healthcheck:
            test: ["CMD", "pg_isready"]
            interval: 30s
            timeout: 20s
            retries: 3
    # database administration tool
  pgadmin:
        hostname: pgadmin
        container_name: pgadmin
        image: 'dpage/pgadmin4:latest'  # latest image as of 2021-11-08
        environment:
            PGADMIN_DEFAULT_EMAIL: 'pgadmin4@pgadmin.org'
            PGADMIN_DEFAULT_PASSWORD: 'admin'
            PGADMIN_CONFIG_SERVER_MODE: 'False'
        volumes:
            - pgadmin_data:/var/lib/pgadmin
        ports:
            - "5050:80"
        networks:
            - nifi-network
          
        restart: on-failure
        depends_on:
        - postgres
        

  
networks:
  nifi-network:
    driver: bridge
  

volumes:
  spark_jars:
  sales_silver:
  sales_gold:
  nifi-database_repository:
  nifi-flowfile_repository:
  nifi-content_repository:
  nifi-provenance_repository:
  nifi-conf:
  nifi-state:
  postgres_data:
  pgadmin_data:


